// <auto-generated />
using System;
using MessageHandlingSystem.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessageHandlingSystem.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221224002208_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("MessageHandlingSystem.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.MessageSources.MessageSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("MessageSources");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MessageSource");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Messages.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("HandlingTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MessageSourceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SendingTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MessageSourceId");

                    b.ToTable("Messages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Message");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Reports.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessagesHandledByEmployee")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MessagesReceivedBySource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Employees.Manager", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.Employees.Employee");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Employees.Subordinate", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.Employees.Employee");

                    b.HasDiscriminator().HasValue("Subordinate");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.MessageSources.EmailMessageSource", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.MessageSources.MessageSource");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("EmailMessageSource");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.MessageSources.MessengerMessageSource", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.MessageSources.MessageSource");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("MessengerMessageSource");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.MessageSources.PhoneMessageSource", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.MessageSources.MessageSource");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("PhoneMessageSource");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Messages.EmailMessage", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.Messages.Message");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("EmailMessage");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Messages.MessengerMessage", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.Messages.Message");

                    b.Property<string>("SenderUserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("MessengerMessage");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Messages.PhoneMessage", b =>
                {
                    b.HasBaseType("MessageHandlingSystem.Domain.Messages.Message");

                    b.Property<string>("SenderPhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("PhoneMessage");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Accounts.Account", b =>
                {
                    b.HasOne("MessageHandlingSystem.Domain.Employees.Employee", null)
                        .WithMany("Accounts")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Employees.Employee", b =>
                {
                    b.HasOne("MessageHandlingSystem.Domain.Employees.Manager", null)
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.MessageSources.MessageSource", b =>
                {
                    b.HasOne("MessageHandlingSystem.Domain.Accounts.Account", null)
                        .WithMany("MessageSources")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Messages.Message", b =>
                {
                    b.HasOne("MessageHandlingSystem.Domain.Accounts.Account", null)
                        .WithMany("LoadedMessages")
                        .HasForeignKey("AccountId");

                    b.HasOne("MessageHandlingSystem.Domain.Employees.Employee", null)
                        .WithMany("HandledMessages")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MessageHandlingSystem.Domain.MessageSources.MessageSource", null)
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("MessageSourceId");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Accounts.Account", b =>
                {
                    b.Navigation("LoadedMessages");

                    b.Navigation("MessageSources");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Employees.Employee", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("HandledMessages");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.MessageSources.MessageSource", b =>
                {
                    b.Navigation("ReceivedMessages");
                });

            modelBuilder.Entity("MessageHandlingSystem.Domain.Employees.Manager", b =>
                {
                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
